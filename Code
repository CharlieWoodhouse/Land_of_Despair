using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using System;
using System.Collections.Generic;

namespace Game002
{
    public class Game1 : Game
    {
        private GraphicsDeviceManager graphics; //graphics
        private SpriteBatch spriteBatch; //spriteBatch

        //player
        private Texture2D playerTexture; //Player skin
        private Vector2 playerPosition; //Player position 
        private float playerSpeed; //Player Speed

        //zombies
        private Texture2D zombieTexture; //Zombie skin
        private List<Vector2> zombiePositions; //Zombie Position
        private float zombieSpeed; //Zombie speed
        private int zombiesToSpawn; //Zombie spawn

        // Declare the zombie textures
        private Texture2D zombieTextureUp; // Display UP
        private Texture2D zombieTextureDown; //Display Down
        private Texture2D zombieTextureLeft; //Display Left 
        private Texture2D zombieTextureRight; //Display Right

        //Overlay
        private bool isGameOver; //Game Over
        private int playerLives; //Lives
        private int playerScore; //Score
        private SpriteFont scoreFont; // Font for displaying the score
        private int roundNumber; //Round
        private int currentLevel; //Current level

        //Background
        private Texture2D backgroundTexture; //Background

        //bullets
        private Texture2D bulletTexture; //Bullet Skin
        private List<Bullet> bullets; //bullet

        //collectable
        private Sprite CollectGold; //Gold
        private Sprite CollectSilver; //Silver
        private Sprite CollectGem; //Gem

        Random rnd = new Random();

        private MouseState previousMouseState; //Mouse Aiming
        private MouseState currentMouseState; //Mouse Aiming

        private const int InitialPlayerLives = 3; //Number of lives

        Sprite[] wallArray = new Sprite[5]; //Walls

        public Game1()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
            IsMouseVisible = true; // Enable the mouse cursor

            // Set the desired resolution
            graphics.PreferredBackBufferWidth = 1280;
            graphics.PreferredBackBufferHeight = 720;
            graphics.ApplyChanges();
        }

        protected override void Initialize()
        {
            //Player speed
            playerPosition = new Vector2(100, 100);
            playerSpeed = 5f;

            //Zombie speed
            zombiePositions = new List<Vector2>();
            zombieSpeed = 1f;
            isGameOver = false;

            playerLives = InitialPlayerLives; // Set the number of lives
            playerScore = 0;

            bullets = new List<Bullet>();

            roundNumber = 0;
            zombiesToSpawn = roundNumber * 2 + 4; //Spawn Rate
            currentLevel = 1; //Start at level 1

            base.Initialize();
        }

        protected override void LoadContent()
        {
            spriteBatch = new SpriteBatch(GraphicsDevice);
            playerTexture = Content.Load<Texture2D>("playable"); //Load Player Skin
            zombieTexture = Content.Load<Texture2D>("zombie"); //Load Zombie Skin
            bulletTexture = Content.Load<Texture2D>("pellet"); //Load Bullet Skin
            scoreFont = Content.Load<SpriteFont>("ScoreFont"); //Load the score font
            backgroundTexture = Content.Load<Texture2D>("background"); //Load Background

            // Load the zombie textures
            zombieTextureUp = Content.Load<Texture2D>("ZombieDown"); //Load Zombie Down
            zombieTextureDown = Content.Load<Texture2D>("ZombieUp"); //Load Zombie Up
            zombieTextureLeft = Content.Load<Texture2D>("ZombieLeft"); //Load Zombie Left
            zombieTextureRight = Content.Load<Texture2D>("ZombieRight"); //Load Zombie Right

            //collectable
            CollectGold = new Sprite(256, 256, Content.Load<Texture2D>("gold_texture")); //Load Gold
            CollectSilver = new Sprite(256, 256, Content.Load<Texture2D>("silver_texture")); //Load Silver
            CollectGem = new Sprite(256, 256, Content.Load<Texture2D>("gem_texture")); //Load Gem

            // Set the positions of the collectable sprites
            CollectGold.Position = new Vector2(400, 400); //Gold
            CollectSilver.Position = new Vector2(600, 300); //Silver
            CollectGem.Position = new Vector2(800, 500); //Gem

            // Create wall sprites
            wallArray[0] = new Sprite(0, 0, Content.Load<Texture2D>("cave_wall_1280x32"));//Top boundary
            wallArray[1] = new Sprite(0, 688, Content.Load<Texture2D>("cave_wall_1280x32"));//bottom boundary
            wallArray[2] = new Sprite(0, 0, Content.Load<Texture2D>("cave_wall_32x720"));//Left boundary
            wallArray[3] = new Sprite(1248, 0, Content.Load<Texture2D>("cave_wall_32x720"));// Right boundary

            base.LoadContent();
        }


        protected override void Update(GameTime gameTime)
        {
            if (!isGameOver)
            {
                HandleInput();
                UpdatePlayer();
                UpdateZombies();
                CheckCollision();
                UpdateBullets();

                KeyboardState kb = Keyboard.GetState();
                if (kb.IsKeyDown(Keys.F11))
                {
                    graphics.ToggleFullScreen();
                }

                if (currentLevel >= 2)
                {
                    wallArray[4] = new Sprite(500, 0, Content.Load<Texture2D>("cave_wall_32x720"));// Right boundary
                }

            }


            base.Update(gameTime);
        }

        private void HandleInput()
        {
            KeyboardState currentKeyboardState = Keyboard.GetState();
            Vector2 movementDirection = Vector2.Zero;

            if (currentKeyboardState.IsKeyDown(Keys.W)) //W = Up screen
                movementDirection.Y -= 1;
            if (currentKeyboardState.IsKeyDown(Keys.A)) //A = Left of screen
                movementDirection.X -= 1;
            if (currentKeyboardState.IsKeyDown(Keys.S)) //S = Down screen
                movementDirection.Y += 1;
            if (currentKeyboardState.IsKeyDown(Keys.D)) //D = Right of screen
                movementDirection.X += 1;

            // Normalize the movement direction so consistent movement speed for all directions
            if (movementDirection != Vector2.Zero)
                movementDirection.Normalize();

            playerPosition += movementDirection * playerSpeed;

            // Update the player texture based on the movement direction
            if (movementDirection.Y < 0)
                playerTexture = Content.Load<Texture2D>("PlayerUp"); //Player Up Skin
            else if (movementDirection.X < 0)
                playerTexture = Content.Load<Texture2D>("PlayerLeft"); //Player Left Skin
            else if (movementDirection.Y > 0)
                playerTexture = Content.Load<Texture2D>("PlayerDown"); //Player Down Skin
            else if (movementDirection.X > 0)
                playerTexture = Content.Load<Texture2D>("PlayerRight"); //Player Right Skin

            // Update the mouse state
            currentMouseState = Mouse.GetState();

            // Shooting logic
            if (currentMouseState.LeftButton == ButtonState.Pressed && previousMouseState.LeftButton == ButtonState.Released)
            {
                Vector2 mousePosition = new Vector2(currentMouseState.X, currentMouseState.Y);
                Vector2 bulletDirection = mousePosition - playerPosition;
                bulletDirection.Normalize();

                bullets.Add(new Bullet(playerPosition, bulletDirection));
            }

            previousMouseState = currentMouseState;
        }

        private void UpdatePlayer()
        {
            // Update player logic here
        }

        private void UpdateZombies()
        {
            // Check if all zombies are elimated 
            if (zombiePositions.Count == 0)
            {
                // Start a new round
                roundNumber++;
                zombiesToSpawn = roundNumber * 2 + 4;
                SpawnZombies();
            }

            for (int i = zombiePositions.Count - 1; i >= 0; i--)
            {
                Vector2 direction = playerPosition - zombiePositions[i];
                direction.Normalize();

                zombiePositions[i] += direction * zombieSpeed;
            }
            for (int i = zombiePositions.Count - 1; i >= 0; i--)
            {
                Vector2 direction = playerPosition - zombiePositions[i];
                direction.Normalize();

                zombiePositions[i] += direction * zombieSpeed;

                // Update the zombie texture based on the movement direction
                if (direction.Y < 0)
                    zombieTexture = zombieTextureUp; //Zombie moves up = Zombie Up Skin
                else if (direction.X < 0)
                    zombieTexture = zombieTextureLeft; //Zombie moves left = Zombie Left Skin
                else if (direction.Y > 0)
                    zombieTexture = zombieTextureDown; //Zombie moves down = Zombie Down Skin
                else if (direction.X > 0)
                    zombieTexture = zombieTextureRight; //Zombie moves right = Zombie Right Skin
            }
        }

        private void SpawnZombies()
        {
            zombiePositions.Clear();

            Random random = new Random();

            for (int i = 0; i < zombiesToSpawn; i++)
            {
                int side = random.Next(4);
                Vector2 zombiePosition;

                switch (side)
                {
                    case 0: // Top side of screen
                        zombiePosition = new Vector2(random.Next(graphics.PreferredBackBufferWidth), -100);
                        break;
                    case 1: // Right side of screen
                        zombiePosition = new Vector2(graphics.PreferredBackBufferWidth + 100, random.Next(graphics.PreferredBackBufferHeight));
                        break;
                    case 2: // Bottom side of screen
                        zombiePosition = new Vector2(random.Next(graphics.PreferredBackBufferWidth), graphics.PreferredBackBufferHeight + 100);
                        break;
                    case 3: // Left side of screen
                        zombiePosition = new Vector2(-100, random.Next(graphics.PreferredBackBufferHeight));
                        break;
                    default:
                        zombiePosition = Vector2.Zero;
                        break;
                }

                zombiePositions.Add(zombiePosition);
            }
        }

        private void CheckCollision()
        {
            Rectangle playerRect = new Rectangle((int)playerPosition.X, (int)playerPosition.Y, playerTexture.Width, playerTexture.Height);

            // Check collision with zombies
            for (int i = zombiePositions.Count - 1; i >= 0; i--)
            {
                Rectangle zombieRect = new Rectangle((int)zombiePositions[i].X, (int)zombiePositions[i].Y, zombieTexture.Width, zombieTexture.Height);

                if (playerRect.Intersects(zombieRect))
                {
                    //Take off a life from player
                    playerLives--;

                    //If players lifes reach 0 game ends
                    if (playerLives <= 0)
                    {
                        isGameOver = true;
                    }
                    else
                    {
                        // Reset the player position if lives are above 0
                        playerPosition = new Vector2(100, 100);
                    }

                    break; // Exit the loop since player is hit
                }
            }

            // Check collision with bullets and zombies
            for (int i = bullets.Count - 1; i >= 0; i--)
            {
                Rectangle bulletRect = new Rectangle((int)bullets[i].Position.X, (int)bullets[i].Position.Y, bulletTexture.Width, bulletTexture.Height);

                for (int j = zombiePositions.Count - 1; j >= 0; j--)
                {
                    Rectangle zombieRect = new Rectangle((int)zombiePositions[j].X, (int)zombiePositions[j].Y, zombieTexture.Width, zombieTexture.Height);

                    if (bulletRect.Intersects(zombieRect))
                    {
                        bullets.RemoveAt(i);
                        playerScore += 100;

                        // Remove the zombie
                        zombiePositions.RemoveAt(j);
                        break; // Exit the loop
                    }
                }
            }

            // Check collision with gold, silver, and gem
            Rectangle screenArea = new Rectangle(0, 0, 1248, 688);

            //Gold collision
            Rectangle collectGoldRect = new Rectangle((int)CollectGold.Position.X, (int)CollectGold.Position.Y, CollectGold.Width, CollectGold.Height);
            if (playerRect.Intersects(collectGoldRect) && screenArea.Contains(collectGoldRect))
            {
                playerScore = playerScore + 50;
                CollectGold.Position = new Vector2(rnd.Next(screenArea.Width - CollectGold.Width), rnd.Next(screenArea.Height - CollectGold.Height));
                CollectGold.Position += new Vector2(screenArea.Left, screenArea.Top);
            }

            //Silver collision
            Rectangle collectSilverRect = new Rectangle((int)CollectSilver.Position.X, (int)CollectSilver.Position.Y, CollectSilver.Width, CollectSilver.Height);
            if (playerRect.Intersects(collectSilverRect) && screenArea.Contains(collectSilverRect))
            {
                playerScore = playerScore + 25;
                CollectSilver.Position = new Vector2(rnd.Next(screenArea.Width - CollectSilver.Width), rnd.Next(screenArea.Height - CollectSilver.Height));
                CollectSilver.Position += new Vector2(screenArea.Left, screenArea.Top);
            }

            //Gem collision
            Rectangle collectGemRect = new Rectangle((int)CollectGem.Position.X, (int)CollectGem.Position.Y, CollectGem.Width, CollectGem.Height);
            if (playerRect.Intersects(collectGemRect) && screenArea.Contains(collectGemRect))
            {
                playerScore = playerScore + 75;
                CollectGem.Position = new Vector2(rnd.Next(screenArea.Width - CollectGem.Width), rnd.Next(screenArea.Height - CollectGem.Height));
                CollectGem.Position += new Vector2(screenArea.Left, screenArea.Top);
            }

        }


        private void UpdateBullets() //Updating bullets
        {
            for (int i = bullets.Count - 1; i >= 0; i--)
            {
                bullets[i].Position += bullets[i].Direction * bullets[i].Speed;

                if (bullets[i].Position.X < 0 || bullets[i].Position.X > graphics.PreferredBackBufferWidth ||
                    bullets[i].Position.Y < 0 || bullets[i].Position.Y > graphics.PreferredBackBufferHeight)
                {
                    bullets.RemoveAt(i);
                }
            }
        }

        public class Bullet
        {
            public Vector2 Position { get; set; }
            public Vector2 Direction { get; set; }
            public float Speed { get; set; }

            public Bullet(Vector2 position, Vector2 direction)
            {
                Position = position;
                Direction = direction;
                Speed = 10f;
            }
        }
        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.CornflowerBlue);

            spriteBatch.Begin();
            spriteBatch.Draw(backgroundTexture, new Rectangle(0, 0, graphics.PreferredBackBufferWidth, graphics.PreferredBackBufferHeight), Color.White); //Draw background
            spriteBatch.Draw(playerTexture, playerPosition, null, Color.White, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f); //Draw Player
            CollectGold.Draw(spriteBatch); //Draw Gold
            CollectSilver.Draw(spriteBatch); //Draw Silver
            CollectGem.Draw(spriteBatch); //Draw Gem

            //Draw walls
            for (int i = 0; i < wallArray.Length; i++)
            {
                if (wallArray[i] != null)
                    wallArray[i].Draw(spriteBatch);
            }

            //Draw zombies
            foreach (var zombiePosition in zombiePositions)
            {
                spriteBatch.Draw(zombieTexture, zombiePosition, null, Color.White, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
            }

            //Draw bullets
            foreach (var bullet in bullets)
            {
                spriteBatch.Draw(bulletTexture, bullet.Position, null, Color.White, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
            }

            foreach (var zombiePosition in zombiePositions)
            {
                spriteBatch.Draw(zombieTexture, zombiePosition, null, Color.White, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
            }

            // Draw the score
            spriteBatch.DrawString(scoreFont, "Score: " + playerScore.ToString(), new Vector2(10, 10), Color.White);

            // Draw the player's lives
            spriteBatch.DrawString(scoreFont, "Lives: " + playerLives.ToString(), new Vector2(10, 30), Color.White);

            // Draw the round number
            spriteBatch.DrawString(scoreFont, "Round: " + roundNumber.ToString(), new Vector2(graphics.PreferredBackBufferWidth - 100, 10), Color.White);

            // Calculate the time since the game started
            TimeSpan elapsedTime = gameTime.TotalGameTime;

            // Format the time as minutes and seconds
            string timerText = string.Format("Time: {0:00}:{1:00}", elapsedTime.Minutes, elapsedTime.Seconds);

            // Draw the timer below the round number
            Vector2 timerPosition = new Vector2(graphics.PreferredBackBufferWidth - 100, 30);
            spriteBatch.DrawString(scoreFont, timerText, timerPosition, Color.White);

            //When game is over draw game over screen
            if (isGameOver)
            {
                string gameOverText = "Game Over";
                string roundsText = "Rounds: " + roundNumber.ToString();
                string scoreText = "Score: " + playerScore.ToString();

                Vector2 gameOverTextSize = scoreFont.MeasureString(gameOverText);
                Vector2 roundsTextSize = scoreFont.MeasureString(roundsText);
                Vector2 scoreTextSize = scoreFont.MeasureString(scoreText);

                Vector2 gameOverTextPosition = new Vector2(graphics.PreferredBackBufferWidth / 2 - gameOverTextSize.X / 2, graphics.PreferredBackBufferHeight / 2 - gameOverTextSize.Y);
                Vector2 roundsTextPosition = new Vector2(graphics.PreferredBackBufferWidth / 2 - roundsTextSize.X / 2, graphics.PreferredBackBufferHeight / 2);
                Vector2 scoreTextPosition = new Vector2(graphics.PreferredBackBufferWidth / 2 - scoreTextSize.X / 2, graphics.PreferredBackBufferHeight / 2 + scoreTextSize.Y);

                spriteBatch.DrawString(scoreFont, gameOverText, gameOverTextPosition, Color.Red);
                spriteBatch.DrawString(scoreFont, roundsText, roundsTextPosition, Color.White);
                spriteBatch.DrawString(scoreFont, scoreText, scoreTextPosition, Color.White);
            }

            spriteBatch.End();

            base.Draw(gameTime);
        }
        static void Main()
        {
            using (var game = new Game1())
                game.Run();
        }
    }
}
